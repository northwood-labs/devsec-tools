// Copyright 2024-2025, Northwood Labs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package hasher

import (
	"fmt"
	"os"
	"regexp"
	"slices"
	"strings"

	"github.com/google/go-containerregistry/pkg/authn"
	"github.com/google/go-containerregistry/pkg/crane"
	"github.com/google/go-containerregistry/pkg/name"
	"github.com/moby/buildkit/frontend/dockerfile/instructions"
	"github.com/moby/buildkit/frontend/dockerfile/parser"
	wlParser "github.com/northwood-labs/whalelint/parser"
	"github.com/pkg/errors"
	"github.com/rs/zerolog"
)

var reSyntax = regexp.MustCompile(`(?i)syntax=(.*)`)

/*
ReadFile reads the contents of the Dockerfile from disk and parses it into an
Abstract Syntax Tree (AST).

----

Arguments:

  - fsPath (string): The path to the Dockerfile on disk.
  - logger (...zerolog.Logger): An optional logger object using zerolog.

----

Returns:

  - *parser.Result: The raw parsed object of the Dockerfile.
  - wlParser.RawDockerfileParser: The raw parsed object of the Dockerfile.
  - []instructions.Stage: A list of stages parsed from the Dockerfile.
  - error: An error object if something went wrong.
*/
func ReadFile(
	fsPath string,
	logger ...zerolog.Logger,
) (*parser.Result, wlParser.RawDockerfileParser, []instructions.Stage, error) {
	var (
		f           *os.File
		err         error
		emptyResult = &parser.Result{}
	)

	zlog := zerolog.Nop()
	if len(logger) > 0 {
		zlog = logger[0]
	}

	f, err = os.Open(fsPath) // lint:allow_include_file
	if err != nil {
		return emptyResult, wlParser.RawDockerfileParser{}, []instructions.Stage{}, errors.Wrap(
			err,
			"failed to open file",
		)
	}

	zlog.Debug().
		Str("dockerfile", fsPath).
		Msgf("Reading Dockerfile from %s", fsPath)

	dockerfile, err := parser.Parse(f)
	if err != nil {
		return dockerfile, wlParser.RawDockerfileParser{}, []instructions.Stage{}, errors.Wrap(
			err,
			"failed to parse Dockerfile",
		)
	}

	zlog.Debug().
		Str("dockerfile", fsPath).
		Msgf("Parsed %s successfully", fsPath)

	stageList, _, err := instructions.Parse(dockerfile.AST)
	if err != nil {
		return dockerfile, wlParser.RawDockerfileParser{}, []instructions.Stage{}, errors.Wrap(
			err,
			"failed to parse Dockerfile instructions",
		)
	}

	arr := zerolog.Arr()
	for i := range stageList {
		arr = arr.Str(stageList[i].BaseName + " AS " + stageList[i].Name)
	}

	zlog.Info().
		Array("stages", arr).
		Msgf("Discovered %d stages", len(stageList))

	err = wlParser.RawParser.ParseDockerfile(fsPath)
	if err != nil {
		return dockerfile, wlParser.RawDockerfileParser{}, []instructions.Stage{}, errors.Wrap(
			err,
			"failed to parse Dockerfile instructions",
		)
	}

	err = f.Close()
	if err != nil {
		return dockerfile, wlParser.RawDockerfileParser{}, []instructions.Stage{}, errors.Wrap(
			err,
			"failed to close file",
		)
	}

	return dockerfile, wlParser.RawParser, stageList, nil
}

/*
ModifyFromLines takes the raw parsed object of the Dockerfile and staging
information, and performs a rewrite of the FROM lines in the Dockerfile to
include the SHA256 digest of the image.

----

Arguments:

  - dockerfile (*parser.Result): The raw parsed object of the Dockerfile.
  - rawParser (wlParser.RawDockerfileParser): The raw parsed object of the Dockerfile.
  - stageList ([]instructions.Stage): A list of stages parsed from the Dockerfile.
  - logger (...zerolog.Logger): An optional logger object using zerolog.

----

Returns:

  - []string: The rewritten lines of the Dockerfile.
  - error: An error object if something went wrong.
*/
func ModifyFromLines(
	dockerfile *parser.Result,
	rawParser wlParser.RawDockerfileParser,
	stageList []instructions.Stage,
	logger ...zerolog.Logger,
) ([]string, error) {
	lines := rawParser.ParseRawLineRange(dockerfile.AST.Location())
	syntaxLines := buildKitSyntax(dockerfile, logger...)
	offset := 1

	zlog := zerolog.Nop()
	if len(logger) > 0 {
		zlog = logger[0]
	}

	if len(stageList) > 0 {
		if len(stageList[0].Location) > 0 {
			offset = stageList[0].Location[0].Start.Line
		}
	}

	for i := range stageList {
		stage := stageList[i]

		loc := wlParser.RawParser.StringLocation(
			stage.BaseName,
			stage.Location,
		)

		startLine := loc[0]
		startPos := loc[1]
		endLine := loc[2]
		endPos := loc[3]
		idx := startLine - offset
		ln := lines[idx]

		if startLine != endLine {
			return []string{}, errors.New("multi-line FROM statements are not supported")
		}

		digest, err := lookupImageDigest(stage.BaseName)
		if err != nil {
			continue
		}

		zlog.Info().
			Str("image", stage.BaseName).
			Str("digest", digest).
			Msgf("Found image digest for %s", stage.BaseName)

		modifiedLn := ln[:startPos] + digest + ln[endPos:]
		lines = slices.Replace(lines, idx, idx+1, modifiedLn)
	}

	return append(syntaxLines, lines...), nil
}

/*
WriteFile takes the rewritten lines and writes them back to disk as a new
Dockerfile.

----

Arguments:

  - lines ([]string): The rewritten lines of the Dockerfile.
  - outputPath (string): The path to the new Dockerfile on disk. If empty, will write to stdout.
  - logger (...zerolog.Logger): An optional logger object using zerolog.

----

Returns:

  - int: The number of bytes written to the new Dockerfile.
  - error: An error object if something went wrong.
*/
func WriteFile(lines []string, outputPath string, logger ...zerolog.Logger) (int, error) {
	var (
		bites int
		err   error
	)

	zlog := zerolog.Nop()
	if len(logger) > 0 {
		zlog = logger[0]
	}

	// Default
	fp := os.Stdout

	if outputPath != "" {
		zlog.Debug().Msgf("Writing updated Dockerfile to %s", outputPath)

		fp, err = os.Create(outputPath) // lint:allow_include_file
		if err != nil {
			return bites, errors.Wrap(err, "failed to open file pointer")
		}
	}

	for i := range lines {
		line := lines[i]

		bites, err = fmt.Fprintln(fp, line)
		if err != nil {
			return bites, errors.Wrap(err, "failed to write lines to the file pointer")
		}
	}

	err = fp.Close()
	if err != nil {
		return bites, errors.Wrap(err, "failed to close file pointer")
	}

	return bites, nil
}

/*
lookupImageDigest performs the work of looking up the SHA256 digest for the
image name. If the image name results in an error, the error is ignored and the
digest replacement is skipped.
*/
func lookupImageDigest(imageName string, authenticator ...authn.Authenticator) (string, error) {
	if strings.Contains(imageName, "@sha256:") {
		return imageName, nil
	}

	auth := authn.Anonymous
	if len(authenticator) > 0 {
		auth = authenticator[0]
	}

	digest, err := crane.Digest(imageName, crane.WithAuth(auth))
	if err != nil {
		return imageName, errors.Wrapf(err, "failed to get image digest for %s", imageName)
	}

	ref, err := name.ParseReference(imageName, name.WithDefaultRegistry(""))
	if err != nil {
		return imageName, errors.Wrapf(err, "failed to parse the image reference for %s", imageName)
	}

	return ref.Context().Digest(digest).String(), nil
}

/*
buildKitSyntax performs the work of looking up the syntax= line (and any other
comments before the first FROM line) in the Dockerfile. Performs the same SHA256
digest lookup.
*/
func buildKitSyntax(dockerfile *parser.Result, logger ...zerolog.Logger) []string {
	var syntaxLines []string

	zlog := zerolog.Nop()
	if len(logger) > 0 {
		zlog = logger[0]
	}

	// Comments above the first FROM line (might be syntax=).
	if len(dockerfile.AST.Children) > 0 {
		firstChild := dockerfile.AST.Children[0]

		for i := range firstChild.PrevComment {
			comment := firstChild.PrevComment[i]
			matches := reSyntax.FindStringSubmatch(comment)

			if len(matches) > 1 {
				digest, err := lookupImageDigest(matches[1])
				if err != nil {
					continue
				}

				zlog.Info().
					Str("image", matches[1]).
					Str("digest", digest).
					Msgf("Found image digest for %s", matches[1])

				syntaxLines = append(syntaxLines, "# syntax="+digest)
			} else {
				syntaxLines = append(syntaxLines, "# "+comment)
			}
		}
	}

	return syntaxLines
}

// crane.WithAuth(&authn.Basic{
// 	Username: "username",
// 	Password: "password",
// }),fromLines
// crane.WithAuth(&authn.Bearer{
// 	Token: "token",
// }),
